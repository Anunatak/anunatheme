(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var DomRouter, jQ, routes;

  jQ = jQuery;

  DomRouter = require("./../../../bower_components/jquery-dom-router/src/jquery.dom-router.js");

  routes = require('./plugins/routes');

  new DomRouter(document, new routes);

}).call(this);


},{"./../../../bower_components/jquery-dom-router/src/jquery.dom-router.js":4,"./plugins/routes":3}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Menu, jQ;

  jQ = jQuery;

  Menu = (function() {
    function Menu() {}

    Menu.prototype.$body = jQ('body');

    Menu.prototype.$content = jQ('div[role="document"]');

    Menu.prototype.$trigger = jQ('[data-navigation-trigger]');

    Menu.prototype.$inner = jQ('[data-navigation-container]');

    Menu.prototype.bodyActiveClass = 'nav-open';

    Menu.prototype.toggle = function() {
      if (!this._hasBodyClass()) {
        return this.open();
      } else {
        return this.close();
      }
    };

    Menu.prototype.open = function() {
      return this._addBodyClass();
    };

    Menu.prototype.close = function() {
      return this._removeBodyClass();
    };

    Menu.prototype._hasBodyClass = function() {
      return this.$body.hasClass(this.bodyActiveClass);
    };

    Menu.prototype._addBodyClass = function() {
      if (!this._hasBodyClass()) {
        return this.$body.addClass(this.bodyActiveClass);
      }
    };

    Menu.prototype._removeBodyClass = function() {
      if (this._hasBodyClass()) {
        return this.$body.removeClass(this.bodyActiveClass);
      }
    };

    return Menu;

  })();

  module.exports = Menu;

}).call(this);


},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Menu, Routes, jQ, menu;

  jQ = jQuery;

  Menu = require('../plugins/navigation');

  menu = new Menu;

  Routes = (function() {
    function Routes() {}

    Routes.prototype.common = function() {
      menu.$trigger.on('click', function() {
        return menu.toggle();
      });
      menu.$inner.find('li a').last().on('keydown', function(e) {
        if (!e.shiftKey) {
          e.preventDefault();
          menu.close();
          return menu.$content.find('a').first().focus();
        }
      });
      return menu.$inner.find('li a').first().on('focus', function(e) {
        if (!e.shiftKey) {
          e.preventDefault();
          return menu.open();
        }
      });
    };

    Routes.prototype.home = function() {
      return console.log("Home");
    };

    Routes.prototype.page = function() {
      return console.log("Page");
    };

    return Routes;

  })();

  module.exports = Routes;

}).call(this);


},{"../plugins/navigation":2}],4:[function(require,module,exports){
;(function ( $ ) {

    if(!$.fn.watch && !$.fn.unwatch) {

    	/**
    	 * Watches an element for a change in a property
    	 * @param  {string}   id The property to watch
    	 * @param  {Function} fn The function to execute when something has changed
    	 */
	    $.fn.watch = function( id, fn ) {

		    return this.each(function(){

		        var self = this;

		        var oldVal = self[id];
		        $(self).data(
		            'watch_timer',
		            setInterval(function(){
		                if (self[id] !== oldVal) {
		                    fn.call(self, id, oldVal, self[id]);
		                    oldVal = self[id];
		                }
		            }, 100)
		        );

		    });
		};

		/**
		 * Unwatches an element
		 */
		$.fn.unwatch = function() {

		    return this.each(function(){
		        clearInterval( $(this).data('watch_timer') );
		    });

		};

	}

    if (!$.DOMRouter) {
        $.DOMRouter = {
        	router: function(el, routes) {
		        var base = this;
		        base.$el = $(el);
		        base.el = el;
		        base.$el.data( 'DOMRouter.router' , base );

		        base.element = base.$el.find($.DOMRouter.defaults.element);

		        base.element.addClass('dom-router-ready');

		        /**
		         * Initalize the functions
		         * @return {void}
		         */
		        base.init = function () {
		            base.routes = routes;
		            $(document).ready(base.load);

		            base.executed = [];

		            base.element.watch('className', function(property, oldClasses, newClasses) {
		            	var classes = newClasses.replace(/-/g, '_').split(/\s+/);

		            	$.each(classes, function(i, className) {
		            		if(!base.routeExecuted(className)) {
		            			base.fire(className);
            					base.executed.push(className);
		            		}
		            	});
		            });
		        };

		        /**
		         * Checks if a route has been executed already
		         * @param  {string} 	route        [description]
		         * @return {boolean}
		         */
		        base.routeExecuted = function(route) {
		        	return base.executed.indexOf(route) > -1;
		        };

		        /**
		         * Gets the classes on the body element
		         * @return {array}
		         */
		        base.classes = function() {
		        	return base.element.get(0).className.replace(/-/g, '_').split(/\s+/);
		        };

		        /**
		         * Load all events to be fired
		         * @return {void}
		         */
	        	base.load = function() {
	        		base.fire('common');
	        		$.each(base.classes(), function(i, className) {
	        			base.fire(className);
            			base.executed.push(className);
	        		});
	        	};

	        	/**
	        	 * Fire an event
	        	 * @param  {Function} func The function to be fired
	        	 * @param  {Array} args Arguments
	        	 * @return {Void}
	        	 */
	        	base.fire = function(func, args) {
	        		var fire,
	        			routes = base.routes;

	        		fire = func !== '';
	        		fire = fire && routes[func];
      				fire = fire && typeof routes[func] === 'function';

      				if(fire) {
	      				routes[func](args);
	      			}
	        	};

		        // Run initializer
		        base.init();

        	},
        	defaults: {
        		element: 'body'
        	}
        };
    }

    $.fn.router = function( routes ) {
        return this.each(function () {
            (new $.DOMRouter.router(this, routes));
        });
    };

    module.exports = $.DOMRouter.router;

})( jQuery );

},{}]},{},[1]);
