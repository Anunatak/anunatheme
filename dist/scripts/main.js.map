{"version":3,"names":[],"mappings":"","sources":["assets/scripts/app.coffee"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Generated by CoffeeScript 1.10.0\n(function() {\n  var DomRouter, jQ, routes;\n\n  jQ = jQuery;\n\n  DomRouter = require(\"./../../bower_components/jquery-dom-router/src/jquery.dom-router.js\");\n\n  routes = require('./plugins/routes');\n\n  new DomRouter(document, routes);\n\n}).call(this);\n\n\n},{\"./../../bower_components/jquery-dom-router/src/jquery.dom-router.js\":6,\"./plugins/routes\":4}],2:[function(require,module,exports){\n// Generated by CoffeeScript 1.10.0\n(function() {\n  var Ajax, jQ;\n\n  jQ = jQuery;\n\n  Ajax = (function() {\n    function Ajax(action, callback, data1, method) {\n      this.action = action;\n      this.callback = callback;\n      this.data = data1;\n      this.method = method;\n      this.setup();\n    }\n\n    Ajax.prototype.setup = function() {\n      var data;\n      data = this.data || {};\n      data = jQ.extend(data, {\n        action: this.action\n      });\n      return jQ.ajax({\n        url: App.ajax,\n        type: this.method || 'GET',\n        data: data,\n        success: this.callback,\n        error: function(err) {\n          return console.log(err);\n        }\n      });\n    };\n\n    return Ajax;\n\n  })();\n\n  module.exports = Ajax;\n\n}).call(this);\n\n\n},{}],3:[function(require,module,exports){\n// Generated by CoffeeScript 1.10.0\n(function() {\n  var jQ;\n\n  jQ = jQuery;\n\n  module.exports = {\n    $body: jQ('body'),\n    $content: jQ('div[role=\"document\"]'),\n    $trigger: jQ('[data-navigation-trigger]'),\n    $inner: jQ('[data-navigation-container]'),\n    bodyActiveClass: 'nav-open',\n    toggle: function() {\n      if (!this._hasBodyClass()) {\n        return this.open();\n      } else {\n        return this.close();\n      }\n    },\n    open: function() {\n      this._addBodyClass();\n      return this.$body.trigger('navigation.opened');\n    },\n    close: function() {\n      this._removeBodyClass();\n      return this.$body.trigger('navigation.closed');\n    },\n    _hasBodyClass: function() {\n      return this.$body.hasClass(this.bodyActiveClass);\n    },\n    _addBodyClass: function() {\n      if (!this._hasBodyClass()) {\n        this.$body.addClass(this.bodyActiveClass);\n      }\n      return this.$body.trigger('navigation.class.added');\n    },\n    _removeBodyClass: function() {\n      if (this._hasBodyClass()) {\n        this.$body.removeClass(this.bodyActiveClass);\n      }\n      return this.$body.trigger('navigation.class.removed');\n    },\n    bind: function() {\n      var self;\n      self = this;\n      self.$trigger.on('click', function() {\n        return self.toggle();\n      });\n      self.$inner.find('li a').last().on('keydown', function(e) {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          self.close();\n          return self.$content.find('a').first().focus();\n        }\n      });\n      self.$inner.find('li a').first().on('focus', function(e) {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          return self.open();\n        }\n      });\n      return self.$body.trigger('navigation.binded');\n    }\n  };\n\n}).call(this);\n\n\n},{}],4:[function(require,module,exports){\n// Generated by CoffeeScript 1.10.0\n(function() {\n  var Ajax, jQ, menu, snake;\n\n  jQ = jQuery;\n\n  menu = require('../plugins/navigation');\n\n  snake = require('../plugins/snake');\n\n  Ajax = require('../classes/Ajax');\n\n  module.exports = {\n    common: function() {\n      return menu.bind();\n    },\n    home: function() {\n      return new Ajax('my_cool_action', (function(response) {\n        return console.log(response(s));\n      }), {\n        cool_parameter_from_request: 'You are cool!'\n      });\n    },\n    page: function() {\n      return console.log(\"Page\");\n    },\n    error404: function() {\n      return snake.bind();\n    }\n  };\n\n}).call(this);\n\n\n},{\"../classes/Ajax\":2,\"../plugins/navigation\":3,\"../plugins/snake\":5}],5:[function(require,module,exports){\n// Generated by CoffeeScript 1.10.0\n(function() {\n  var Modernizr, Snake, jQ;\n\n  jQ = jQuery;\n\n  Snake = require(\"./../../../bower_components/jquery-snake/dist/jquery.snake.js\");\n\n  Modernizr = require('browsernizr');\n\n  module.exports = {\n    bind: function() {\n      var $canvas, $container, apple, canvas, game, score, snakeHead, snakeTail;\n      $container = jQ('.snake-container');\n      $canvas = $container.find('.snake-canvas');\n      canvas = $canvas.get(0);\n      apple = $container.find('.snake-color.apple').css('color');\n      snakeHead = $container.find('.snake-color.snake-head').css('color');\n      snakeTail = $container.find('.snake-color.snake-tail').css('color');\n      score = $container.find('.snake-color.score').css('color');\n      game = new Snake(canvas, {\n        snakeHeadColor: snakeHead,\n        snakeTailColor: snakeTail,\n        appleColor: apple,\n        scoreColor: score\n      });\n      if (Modernizr.touch) {\n        $canvas.trigger('snake.enable.controls');\n      }\n      $canvas.on('snake.game.collide', function() {\n        $container.find('.snake-crash').fadeIn();\n        return $canvas.addClass('snake-crashed');\n      });\n      $canvas.on('snake.game.play', function(event, snake, gameOver) {\n        $canvas.trigger('snake.reset');\n        $canvas.removeClass('snake-crashed');\n        return $canvas.addClass('snake-playing');\n      });\n      return jQ('.snake-play').on('click', function(e) {\n        e.preventDefault();\n        return $(this).parent().fadeOut(function() {\n          canvas.focus();\n          return $canvas.trigger('snake.play');\n        });\n      });\n    }\n  };\n\n}).call(this);\n\n\n},{\"./../../../bower_components/jquery-snake/dist/jquery.snake.js\":7,\"browsernizr\":8}],6:[function(require,module,exports){\n;(function ( $ ) {\n\n    if(!$.fn.watch && !$.fn.unwatch) {\n\n    \t/**\n    \t * Watches an element for a change in a property\n    \t * @param  {string}   id The property to watch\n    \t * @param  {Function} fn The function to execute when something has changed\n    \t */\n\t    $.fn.watch = function( id, fn ) {\n\n\t\t    return this.each(function(){\n\n\t\t        var self = this;\n\n\t\t        var oldVal = self[id];\n\t\t        $(self).data(\n\t\t            'watch_timer',\n\t\t            setInterval(function(){\n\t\t                if (self[id] !== oldVal) {\n\t\t                    fn.call(self, id, oldVal, self[id]);\n\t\t                    oldVal = self[id];\n\t\t                }\n\t\t            }, 100)\n\t\t        );\n\n\t\t    });\n\t\t};\n\n\t\t/**\n\t\t * Unwatches an element\n\t\t */\n\t\t$.fn.unwatch = function() {\n\n\t\t    return this.each(function(){\n\t\t        clearInterval( $(this).data('watch_timer') );\n\t\t    });\n\n\t\t};\n\n\t}\n\n    if (!$.DOMRouter) {\n        $.DOMRouter = {\n        \trouter: function(el, routes) {\n\t\t        var base = this;\n\t\t        base.$el = $(el);\n\t\t        base.el = el;\n\t\t        base.$el.data( 'DOMRouter.router' , base );\n\n\t\t        base.element = base.$el.find($.DOMRouter.defaults.element);\n\n\t\t        base.element.addClass('dom-router-ready');\n\n\t\t        /**\n\t\t         * Initalize the functions\n\t\t         * @return {void}\n\t\t         */\n\t\t        base.init = function () {\n\t\t            base.routes = routes;\n\t\t            $(document).ready(base.load);\n\n\t\t            base.executed = [];\n\n\t\t            base.element.watch('className', function(property, oldClasses, newClasses) {\n\t\t            \tvar classes = newClasses.replace(/-/g, '_').split(/\\s+/);\n\n\t\t            \t$.each(classes, function(i, className) {\n\t\t            \t\tif(!base.routeExecuted(className)) {\n\t\t            \t\t\tbase.fire(className);\n            \t\t\t\t\tbase.executed.push(className);\n\t\t            \t\t}\n\t\t            \t});\n\t\t            });\n\t\t        };\n\n\t\t        /**\n\t\t         * Checks if a route has been executed already\n\t\t         * @param  {string} \troute        [description]\n\t\t         * @return {boolean}\n\t\t         */\n\t\t        base.routeExecuted = function(route) {\n\t\t        \treturn base.executed.indexOf(route) > -1;\n\t\t        };\n\n\t\t        /**\n\t\t         * Gets the classes on the body element\n\t\t         * @return {array}\n\t\t         */\n\t\t        base.classes = function() {\n\t\t        \treturn base.element.get(0).className.replace(/-/g, '_').split(/\\s+/);\n\t\t        };\n\n\t\t        /**\n\t\t         * Load all events to be fired\n\t\t         * @return {void}\n\t\t         */\n\t        \tbase.load = function() {\n\t        \t\tbase.fire('common');\n\t        \t\t$.each(base.classes(), function(i, className) {\n\t        \t\t\tbase.fire(className);\n            \t\t\tbase.executed.push(className);\n\t        \t\t});\n\t        \t};\n\n\t        \t/**\n\t        \t * Fire an event\n\t        \t * @param  {Function} func The function to be fired\n\t        \t * @param  {Array} args Arguments\n\t        \t * @return {Void}\n\t        \t */\n\t        \tbase.fire = function(func, args) {\n\t        \t\tvar fire,\n\t        \t\t\troutes = base.routes;\n\n\t        \t\tfire = func !== '';\n\t        \t\tfire = fire && routes[func];\n      \t\t\t\tfire = fire && typeof routes[func] === 'function';\n\n      \t\t\t\tif(fire) {\n\t      \t\t\t\troutes[func](args);\n\t      \t\t\t}\n\t        \t};\n\n\t\t        // Run initializer\n\t\t        base.init();\n\n        \t},\n        \tdefaults: {\n        \t\telement: 'body'\n        \t}\n        };\n    }\n\n    $.fn.router = function( routes ) {\n        return this.each(function () {\n            (new $.DOMRouter.router(this, routes));\n        });\n    };\n\n    if(typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = $.DOMRouter.router;\n\t}\n\n})( jQuery );\n\n},{}],7:[function(require,module,exports){\n/*\n *  jquery-snake - v3.6.0\n *  A jQuery plugin for the Snake game.\n *  http://jqueryboilerplate.com\n *\n *  Made by Tor Morten Jensen\n *  Under MIT License\n */\nconst BLOCK_SIZE = 10;\n\nvar Direction = {\n\tLEFT: 0,\n\tRIGHT: 1,\n\tUP: 2,\n\tDOWN: 3\n};\n\nfunction Point(x, y) {\n\tthis.x = x;\n\tthis.y = y;\n}\n\nfunction Controls(canvas) {\n\tconst SIZE = 50;\n\tconst GAP = 5;\n\n\tvar left, right, up, down;\n\n\tvar listener = null;\n\n\tthis.updateLocation = function() {\n\t\tleft  = new Point(canvas.width - SIZE * 3 - GAP * 3,\n\t\t\t\t\t\t\t\t\t\t\tcanvas.height - SIZE - GAP);\n\t\tdown  = new Point(canvas.width - SIZE * 2 - GAP * 2,\n\t\t\t\t\t\t\t\t\t\t\tcanvas.height - SIZE - GAP);\n\t\tright = new Point(canvas.width - SIZE - GAP,\n\t\t\t\t\t\t\t\t\t\t\tcanvas.height - SIZE - GAP);\n\t\tup    = new Point(canvas.width - SIZE * 2 - GAP * 2,\n\t\t\t\t\t\t\t\t\t\t\tcanvas.height - SIZE * 2 - GAP * 2);\n\t};\n\tthis.updateLocation();\n\n\tthis.register = function(newListener) {\n\t\tlistener = newListener;\n\t};\n\n\tthis.listen = function() {\n\t\t$(canvas).on('touchstart', checkForTouch);\n\t\t$(canvas).on('click', checkForClick);\n\t};\n\n\tvar touched = false;\n\tfunction checkForTouch(e) {\n\t\ttouched = true;\n\n\t\tvar eventX = e.touches[0].pageX - canvas.offsetLeft;\n\t\tvar eventY = e.touches[0].pageY - canvas.offsetTop;\n\n\t\tcheckForCollision(eventX, eventY);\n\t}\n\n\tfunction checkForClick(e) {\n\t\tconsole.log(canvas);\n\t\tif (touched) { return; }\n\n\t\tvar eventX = e.pageX - canvas.offsetLeft;\n\t\tvar eventY = e.pageY - canvas.offsetTop;\n\n\t\treturn checkForCollision(eventX, eventY);\n\t}\n\n\tfunction checkForCollision(eventX, eventY) {\n\t\tif (collidesWithLeft(eventX, eventY)) {\n\t\t\tlistener.turnLeft();\n\t\t} else if (collidesWithRight(eventX, eventY)) {\n\t\t\tlistener.turnRight();\n\t\t} else if (collidesWithUp(eventX, eventY)) {\n\t\t\tlistener.turnUp();\n\t\t} else if (collidesWithDown(eventX, eventY)) {\n\t\t\tlistener.turnDown();\n\t\t}\n\t}\n\n\tfunction collidesWithLeft(x, y) {\n\t\treturn collidesWithControl(left, x, y);\n\t}\n\n\tfunction collidesWithRight(x, y) {\n\t\treturn collidesWithControl(right, x, y);\n\t}\n\n\tfunction collidesWithUp(x, y) {\n\t\treturn collidesWithControl(up, x, y);\n\t}\n\n\tfunction collidesWithDown(x, y) {\n\t\treturn collidesWithControl(down, x, y);\n\t}\n\n\tfunction collidesWithControl(control, x, y) {\n\t\tvar xCollides = control.x <= x && x <= control.x + SIZE;\n\t\tvar yCollides = control.y <= y && y <= control.y + SIZE;\n\t\treturn xCollides && yCollides;\n\t}\n\n\tthis.draw = function(context) {\n\t\tcontext.fillStyle = 'rgba(0, 0, 0, 0.1)';\n\n\t\tcontext.fillRect(left.x, left.y, SIZE, SIZE);\n\t\tcontext.fillRect(right.x, right.y, SIZE, SIZE);\n\t\tcontext.fillRect(up.x, up.y, SIZE, SIZE);\n\t\tcontext.fillRect(down.x, down.y, SIZE, SIZE);\n\t};\n}\n\nfunction ResetButton(canvas, game) {\n\tthis.x = 10;\n\tthis.y = canvas.height - 50;\n\tthis.width = 100;\n\tthis.height = 40;\n\n\tvar btn = this;\n\n\tthis.updateLocation = function() {\n\t\tthis.y = canvas.height - 50;\n\t};\n\n\tthis.listen = function() {\n\t\t$(canvas).on('click', checkForClick);\n\t};\n\n\tfunction checkForClick(e) {\n\t\tvar eventX = e.pageX - canvas.offsetLeft;\n\t\tvar eventY = e.pageY - canvas.offsetTop;\n\n\t\tvar xCollides = btn.x <= eventX && eventX <= btn.x + btn.width;\n\t\tvar yCollides = btn.y <= eventY && eventY <= btn.y + btn.height;\n\n\t\tif (xCollides && yCollides) {\n\t\t\tgame.reset();\n\t\t}\n\t}\n\n\tthis.draw = function(context) {\n\n\t\t// context.fillRect(this.x, this.y, this.width, this.height);\n\n\t\t// context.font = '16px sans-serif';\n\t\t// context.textAlign = 'center';\n\t\t// context.textBaseline = 'middle';\n\t\t// context.fillStyle = '#333';\n\n\t\t// var centerX = this.x + (this.width / 2);\n\t\t// var centerY = this.y + (this.height / 2);\n\t\t// context.fillText(options.labels.reset, centerX, centerY);\n\t};\n}\n\nfunction Score(canvas, options) {\n\tthis.score = 0;\n\n\tthis.reset = function() {\n\t\tthis.score = 0;\n\t};\n\n\tthis.increment = function() {\n\t\tthis.score++;\n\t};\n\n\tthis.draw = function(context) {\n\t\tcontext.font = 'bold 36px sans-serif';\n\t\tcontext.textAlign = 'left';\n\t\tcontext.textBaseline = 'top';\n\t\tcontext.fillStyle = options.scoreColor;\n\t\tcontext.fillText(options.labels.score + ': ' + this.score, 10, 10);\n\t};\n}\n\nfunction Snake(canvas, options) {\n\tthis.points = [new Point(BLOCK_SIZE, BLOCK_SIZE)];\n\tthis.direction = Direction.RIGHT;\n\n\tvar snake = this;\n\n\tthis.reset = function() {\n\t\tthis.points = [new Point(50, 50)];\n\t\tthis.direction = Direction.RIGHT;\n\t};\n\n\tthis.headCollidesWithWall = function(canvas) {\n\t\tvar head = this.points[0];\n\t\tvar xCollides = 0 > head.x || head.x > canvas.width - BLOCK_SIZE;\n\t\tvar yCollides = 0 > head.y || head.y > canvas.height - BLOCK_SIZE;\n\t\treturn xCollides || yCollides;\n\t};\n\n\tthis.headCollidesWithSelf = function() {\n\t\tvar head = this.points[0];\n\t\tfor (i = 1; i < this.points.length; i++) {\n\t\t\tif (head.x === this.points[i].x && head.y === this.points[i].y) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tthis.headCollidesWithApple = function(apple){\n\t\tvar head = this.points[0];\n\t\treturn head.x === apple.x && head.y === apple.y;\n\t};\n\n\tthis.turnLeft = function() {\n\t\tif (snake.points.length === 1 || snake.points[1].x === snake.points[0].x) {\n\t\t\tsnake.direction = Direction.LEFT;\n\t\t}\n\t};\n\n\tthis.turnRight = function() {\n\t\tif (snake.points.length === 1 || snake.points[1].x === snake.points[0].x) {\n\t\t\tsnake.direction = Direction.RIGHT;\n\t\t}\n\t};\n\n\tthis.turnUp = function() {\n\t\tif (snake.points.length === 1 || snake.points[1].y === snake.points[0].y) {\n\t\t\tsnake.direction = Direction.UP;\n\t\t}\n\t};\n\n\tthis.turnDown = function() {\n\t\tif (snake.points.length === 1 || snake.points[1].y === snake.points[0].y) {\n\t\t\tsnake.direction = Direction.DOWN;\n\t\t}\n\t};\n\n\tvar keyMap = {\n\t\t'37': this.turnLeft,\n\t\t'38': this.turnUp,\n\t\t'39': this.turnRight,\n\t\t'40': this.turnDown\n\t};\n\n\tthis.listenForKeyPress = function(canvas) {\n\t\t$(document).on('keydown', $(canvas), function(e) {\n\t\t\tvar code = e.keyCode;\n\t\t\tif (37 <= code && code <= 40) {\n\t\t\t\te.preventDefault();\n\t\t\t\tkeyMap[code]();\n\t\t\t}\n\t\t});\n\t};\n\n\tthis.draw = function(context) {\n\n\t\tfor (i = 0; i < this.points.length; i++) {\n\t\t\tif(i === 0) {\n\t\t\t\tcontext.fillStyle = options.snakeHeadColor;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcontext.fillStyle = options.snakeTailColor;\n\t\t\t}\n\t\t\tcontext.fillRect(this.points[i].x, this.points[i].y, BLOCK_SIZE, BLOCK_SIZE);\n\t\t}\n\t};\n}\n\nfunction Apple(canvas, options) {\n\n\tfunction generateX() {\n\t\tvar x = Math.random() * (canvas.width - BLOCK_SIZE);\n\t\treturn Math.round(x / BLOCK_SIZE) * BLOCK_SIZE;\n\t}\n\n\tfunction generateY() {\n\t\tvar y = Math.random() * (canvas.height - BLOCK_SIZE);\n\t\treturn Math.round(y / BLOCK_SIZE) * BLOCK_SIZE;\n\t}\n\n\tthis.x = generateX();\n\tthis.y = generateY();\n\n\tthis.move = function() {\n\t\tthis.x = generateX();\n\t\tthis.y = generateY();\n\t};\n\n\tthis.draw = function(context) {\n\t\tcontext.fillStyle = options.appleColor;\n\t\tcontext.fillRect(this.x, this.y, BLOCK_SIZE, BLOCK_SIZE);\n\t};\n}\n\nfunction SnakeGame(canvas, options) {\n\tvar snake = new Snake(canvas, options);\n\tvar apple = new Apple(canvas, options);\n\tvar btnReset = new ResetButton(canvas, this);\n\tvar score = new Score(canvas, options);\n\tvar controls = null;\n\n\tvar context = canvas.getContext('2d');\n\n\tvar time = Date.now();\n\tvar gameOver = false;\n\n\tvar game = this;\n\n\tthis.moveApple = function() {\n\t\tapple.move();\n\t};\n\n\tthis.resize = function() {\n\t\tvar appleOutsideX = apple.x > canvas.width - BLOCK_SIZE;\n\t\tvar appleOutsideY = apple.y > canvas.height - BLOCK_SIZE;\n\n\t\tif (appleOutsideX || appleOutsideY) {\n\t\t\tapple.move();\n\t\t}\n\n\t\tbtnReset.updateLocation();\n\n\t\tif (controls !== null) {\n\t\t\tcontrols.updateLocation();\n\t\t}\n\t\tjQuery(canvas).trigger('snake.game.resize', [game]);\n\t\tdrawGame();\n\t};\n\n\tthis.reset = function() {\n\t\tjQuery(canvas).trigger('snake.game.reset', [game]);\n\t\tgameOver = false;\n\t\ttime = Date.now();\n\n\t\tsnake.reset();\n\t\tapple.move();\n\t\tscore.reset();\n\t};\n\n\tthis.pause = function() {\n\t\tgameOver = true;\n\t};\n\n\tthis.continue = function() {\n\t\tgameOver = false;\n\t};\n\n\tthis.enableControls = function() {\n\t\tcontrols = new Controls(canvas);\n\t\tcontrols.register(snake);\n\t\tjQuery(canvas).trigger('snake.game.enable.controls', [game]);\n\t};\n\n\tthis.play = function() {\n\t\tbtnReset.listen();\n\t\tsnake.listenForKeyPress(canvas);\n\n\t\tif (controls !== null) {\n\t\t\tcontrols.listen();\n\t\t}\n\n\t\tjQuery(canvas).trigger('snake.game.play', [game, gameOver]);\n\n\t\t// game loop\n\t\tfunction mainloop() {\n\t\t\tif (!gameOver) {\n\t\t\t\tupdateGame();\n\t\t\t\tdrawGame();\n\t\t\t}\n\t\t}\n\n\t\t// game loop timing\n\t\tif (window.requestAnimationFrame !== null) {\n\t\t\tvar recursiveAnim = function() {\n\t\t\t\tmainloop();\n\t\t\t\twindow.requestAnimationFrame(recursiveAnim);\n\t\t\t};\n\n\t\t\twindow.requestAnimationFrame(recursiveAnim);\n\t\t} else {\n\t\t\tsetInterval(mainloop, 1000.0 / 60);\n\t\t}\n\t};\n\n\tfunction updateGame() {\n\t\tvar newTime = Date.now();\n\n\t\tif (newTime - time > 50) {\n\t\t\ttime = newTime;\n\n\t\t\tif (snake.headCollidesWithApple(apple)) {\n\t\t\t\tvar last = snake.points[snake.points.length-1];\n\t\t\t\tsnake.points.push(new Point(last.x, last.y));\n\n\t\t\t\tscore.increment();\n\t\t\t\tjQuery(canvas).trigger('snake.game.score.update', [score.score]);\n\t\t\t\tapple.move();\n\t\t\t}\n\n\t\t\t// update all but head of snake\n\t\t\tfor (i = snake.points.length - 1; i > 0; i--) {\n\t\t\t\tsnake.points[i].x = snake.points[i-1].x;\n\t\t\t\tsnake.points[i].y = snake.points[i-1].y;\n\t\t\t}\n\n\t\t\t// update head\n\t\t\tif (snake.direction === Direction.LEFT) {\n\t\t\t\tsnake.points[0].x -= BLOCK_SIZE;\n\t\t\t} else if (snake.direction === Direction.RIGHT) {\n\t\t\t\tsnake.points[0].x += BLOCK_SIZE;\n\t\t\t} else if (snake.direction === Direction.UP) {\n\t\t\t\tsnake.points[0].y -= BLOCK_SIZE;\n\t\t\t} else {\n\t\t\t\tsnake.points[0].y += BLOCK_SIZE;\n\t\t\t}\n\n\t\t\tif (snake.headCollidesWithWall(canvas) || snake.headCollidesWithSelf()) {\n\t\t\t\tjQuery(canvas).trigger('snake.game.collide', [score.score]);\n\t\t\t\tgameOver = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction drawGame() {\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\tsnake.draw(context);\n\n\t\tapple.draw(context);\n\n\t\tscore.draw(context);\n\n\t\tbtnReset.draw(context);\n\n\t\tif (controls !== null) {\n\t\t\tcontrols.draw(context);\n\t\t}\n\t\tjQuery(canvas).trigger('snake.game.ready', [game]);\n\t}\n}\n\n\n;(function ( $, window, document, undefined ) {\n\n\t'use strict';\n\n\t\tvar pluginName = 'snake',\n\t\t\tdefaults = {\n\t\t\t\tsnakeHeadColor: 'rgb(0,0,0)',\n\t\t\t\tsnakeTailColor: 'rgb(115,115,115)',\n\t\t\t\tappleColor: 'rgb(255,0,0)',\n\t\t\t\tscoreColor: 'rgb(200,200,200)',\n\t\t\t\tresponsive: true,\n\t\t\t\tratio: '16:9',\n\t\t\t\tlabels: {\n\t\t\t\t\tscore: 'Score',\n\t\t\t\t\treset: 'Reset'\n\t\t\t\t}\n\t\t\t};\n\n\t\tfunction Plugin ( element, options ) {\n\t\t\tthis.element = element;\n\t\t\tthis.$element = $(element);\n\t\t\tthis.settings = $.extend( {}, defaults, options );\n\t\t\tthis._defaults = defaults;\n\t\t\tthis._name = pluginName;\n\t\t\tthis.init();\n\t\t}\n\n\t\t$.extend(Plugin.prototype, {\n\t\t\tinit: function () {\n\t\t\t\tthis.game = new SnakeGame(this.element, this.settings);\n\n\t\t\t\tif(this.settings.responsive) {\n\t\t\t\t\tthis.resize();\n\t\t\t\t\t$(window).on('resize', this.resize);\n\t\t\t\t}\n\n\t\t\t\tthis.listen();\n\t\t\t},\n\t\t\tlisten: function() {\n\t\t\t\tvar me = this;\n\n\t\t\t\tthis.$element.on('snake.play', function() {\n\t\t\t\t\tme.game.play();\n\t\t\t\t});\n\n\t\t\t\tthis.$element.on('snake.reset', function() {\n\t\t\t\t\tme.game.reset();\n\t\t\t\t});\n\n\t\t\t\tthis.$element.on('snake.pause', function() {\n\t\t\t\t\tme.game.pause();\n\t\t\t\t});\n\n\t\t\t\tthis.$element.on('snake.enable.controls', function() {\n\t\t\t\t\tme.game.enableControls();\n\t\t\t\t});\n\n\t\t\t\tthis.$element.on('snake.continue', function() {\n\t\t\t\t\tme.game.continue();\n\t\t\t\t});\n\n\t\t\t\tthis.$element.on('snake.resize', function() {\n\t\t\t\t\tme.game.resize();\n\t\t\t\t});\n\n\t\t\t\tthis.$element.on('snake.move.apple', function() {\n\t\t\t\t\tme.game.moveApple();\n\t\t\t\t});\n\n\t\t\t\t$(window).focus(function() {\n\t\t\t\t\tme.game.continue();\n\t\t\t\t});\n\n\t\t\t\t$(window).blur(function() {\n\t\t\t\t\tme.game.pause();\n\t\t\t\t});\n\n\t\t\t},\n\t\t\tresize: function() {\n\n\t\t\t\t// get the aspect ratio\n\t\t\t\tvar ratio = this.settings.ratio.split(':');\n\t\t\t\t// fetch the width of the parent element\n\t\t\t\tvar width = this.$element.parent().width();\n\n\t\t\t\t// figure out what the height should be according to our aspect ratio\n\t\t\t\tvar height = width*ratio[1]/ratio[0];\n\n\t\t\t\t// set these to whatever dimensions you want\n\t\t\t\tthis.element.style.width = width + 'px'; // width same as parent\n\t\t\t\tthis.element.style.height = height + 'px'; // height same as parent\n\n\t\t\t\t// these must be set for proper drawing\n\t\t\t\tthis.element.width = width;\n\t\t\t\tthis.element.height = height;\n\n\t\t\t\tthis.game.resize();\n\t\t\t}\n\t\t});\n\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\treturn this.each(function() {\n\t\t\t\tif ( !$.data( this, 'plugin_' + pluginName ) ) {\n\t\t\t\t\t\t$.data( this, 'plugin_' + pluginName, new Plugin( this, options ) );\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif(typeof module !== 'undefined' && module.exports) {\n\t\t\tmodule.exports = Plugin;\n\t\t}\n\n})( jQuery, window, document );\n\n},{}],8:[function(require,module,exports){\nvar Modernizr = require('./lib/Modernizr'),\n    ModernizrProto = require('./lib/ModernizrProto'),\n    classes = require('./lib/classes'),\n    testRunner = require('./lib/testRunner'),\n    setClasses = require('./lib/setClasses');\n\n// Run each test\ntestRunner();\n\n// Remove the \"no-js\" class if it exists\nsetClasses(classes);\n\ndelete ModernizrProto.addTest;\ndelete ModernizrProto.addAsyncTest;\n\n// Run the things that are supposed to run after the tests\nfor (var i = 0; i < Modernizr._q.length; i++) {\n  Modernizr._q[i]();\n}\n\nmodule.exports = Modernizr;\n\n},{\"./lib/Modernizr\":9,\"./lib/ModernizrProto\":10,\"./lib/classes\":11,\"./lib/setClasses\":15,\"./lib/testRunner\":16}],9:[function(require,module,exports){\nvar ModernizrProto = require('./ModernizrProto.js');\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  module.exports = Modernizr;\n\n\n},{\"./ModernizrProto.js\":10}],10:[function(require,module,exports){\nvar tests = require('./tests.js');\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.2.0 (browsernizr 2.0.1)',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix' : '',\n      'enableClasses' : true,\n      'enableJSClass' : true,\n      'usePrefixes' : true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name : name, fn : fn, options : options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name : null, fn : fn});\n    }\n  };\n\n  module.exports = ModernizrProto;\n\n\n},{\"./tests.js\":17}],11:[function(require,module,exports){\n\n  var classes = [];\n  module.exports = classes;\n\n\n},{}],12:[function(require,module,exports){\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  module.exports = docElement;\n\n\n},{}],13:[function(require,module,exports){\n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  module.exports = is;\n\n\n},{}],14:[function(require,module,exports){\nvar docElement = require('./docElement.js');\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  module.exports = isSVG;\n\n\n},{\"./docElement.js\":12}],15:[function(require,module,exports){\nvar Modernizr = require('./Modernizr.js');\nvar docElement = require('./docElement.js');\nvar isSVG = require('./isSVG.js');\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      isSVG ? docElement.className.baseVal = className : docElement.className = className;\n    }\n\n  }\n\n  module.exports = setClasses;\n\n\n},{\"./Modernizr.js\":9,\"./docElement.js\":12,\"./isSVG.js\":14}],16:[function(require,module,exports){\nvar tests = require('./tests.js');\nvar Modernizr = require('./Modernizr.js');\nvar classes = require('./classes.js');\nvar is = require('./is.js');\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            /* jshint -W053 */\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  module.exports = testRunner;\n\n\n},{\"./Modernizr.js\":9,\"./classes.js\":11,\"./is.js\":13,\"./tests.js\":17}],17:[function(require,module,exports){\n\n  var tests = [];\n  module.exports = tests;\n\n\n},{}]},{},[1]);\n"],"file":"main.js","sourceRoot":"/source/"}